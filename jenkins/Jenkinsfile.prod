pipeline {
    agent any
    
    environment {
        CONTAINER_REPO_URI = "863128715353.dkr.ecr.eu-central-1.amazonaws.com"
    }
    
    stages {
        stage('Checkout Application') {
            steps {
                script {
                    FAILED_STAGE = "${STAGE_NAME}"
                    // Checkout the main application repository
                    dir('ai-assistant') {
                        git branch: 'main', credentialsId: 'ssh_k', url: 'git@github.com:nurzhanizbassov/ai-assistant.git'
                    }
                }
            }
        }
        
        stage('create-tags') {
            steps {
                script {
                    FAILED_STAGE = "${STAGE_NAME}"
                    
                    // Extract git metadata from ai-assistant repository
                    dir('ai-assistant') {
                        COMMITTER_EMAIL = sh(returnStdout: true, script: 'git log --format="%ae" | head -1').trim()
                        COMMITTER_USER = sh(returnStdout: true, script: 'git log --format="%an" | head -1').trim()
                        GIT_HASH = sh(returnStdout: true, script: 'git log --format="%ae" | head -1').trim()
                        COMMIT_MESSAGE = sh(returnStdout: true, script: 'git log --format=%B -n 1 HEAD').trim()
                    }
                    
                    echo "Committer: ${COMMITTER_USER} (${COMMITTER_EMAIL})"
                    echo "Commit Hash: ${GIT_HASH}"
                    echo "Commit Message: ${COMMIT_MESSAGE}"
                    echo "Container Repo: ${CONTAINER_REPO_URI}"
                }
                
                // Send start notification
                withCredentials([
                    string(credentialsId: 'TOKEN', variable: 'TOKEN'), 
                    string(credentialsId: 'CHAT_ID', variable: 'CHAT_ID')
                ]) {
                    sh """
                        curl -iX GET https://api.telegram.org/bot\$TOKEN/sendMessage \
                        -d chat_id=\$CHAT_ID \
                        -d text="Pipeline: \$JOB_BASE_NAME üöÄSTARTED (PRODUCTION)\\nBuild url: \$BUILD_URL\\n‚úâÔ∏èMessage: \$COMMIT_MESSAGE\\nUser/email: \$COMMITTER_USER/\$COMMITTER_EMAIL\\nID: \$GIT_HASH"
                    """
                }
            }
        }
        
        stage('Build backend') {
            steps {
                script {
                    FAILED_STAGE = "${STAGE_NAME}"
                }
                sh """
                    docker build -f cicd-ai-assistant/docker/Dockerfile.backend.prod \
                    -t ${CONTAINER_REPO_URI}/ai-assistant-backend-prod:latest \
                    -t ${CONTAINER_REPO_URI}/ai-assistant-backend-prod:${BUILD_NUMBER} .
                """
            }
        }
        
        stage('Build frontend') {
            steps {
                script {
                    FAILED_STAGE = "${STAGE_NAME}"
                }
                sh """
                    docker build -f cicd-ai-assistant/docker/Dockerfile.frontend.prod \
                    -t ${CONTAINER_REPO_URI}/ai-assistant-frontend-prod:latest \
                    -t ${CONTAINER_REPO_URI}/ai-assistant-frontend-prod:${BUILD_NUMBER} .
                """
            }
        }
        
        stage('push-to-repo') {
            steps {
                script {
                    FAILED_STAGE = "${STAGE_NAME}"
                }
                sh """
                    aws ecr get-login-password --region eu-central-1 | docker login --username AWS --password-stdin ${CONTAINER_REPO_URI}
                    docker push ${CONTAINER_REPO_URI}/ai-assistant-backend-prod:latest
                    docker push ${CONTAINER_REPO_URI}/ai-assistant-backend-prod:${BUILD_NUMBER}
                    docker push ${CONTAINER_REPO_URI}/ai-assistant-frontend-prod:latest
                    docker push ${CONTAINER_REPO_URI}/ai-assistant-frontend-prod:${BUILD_NUMBER}
                """
            }
        }
        
        stage('sed-manifest-files') {
            steps {
                script {
                    FAILED_STAGE = "${STAGE_NAME}"
                }
                sh """
                    sed -ie "s|BACKEND_STRING_TO_BE_REPLACED|${CONTAINER_REPO_URI}/ai-assistant-backend-prod:${BUILD_NUMBER}|g" cicd-ai-assistant/kubernetes/prod/backend-deployment.yaml
                    sed -ie "s|FRONTEND_STRING_TO_BE_REPLACED|${CONTAINER_REPO_URI}/ai-assistant-frontend-prod:${BUILD_NUMBER}|g" cicd-ai-assistant/kubernetes/prod/frontend-deployment.yaml
                """
            }
        }
        
        stage('if-migrations-true') {
            steps {
                script {
                    FAILED_STAGE = "${STAGE_NAME}"
                    if (COMMIT_MESSAGE == "DO_MIGRATIONS") {
                        echo 'Migration triggered by commit message'
                        sh """
                            sed -ie "s|MIGRATIONS_TRIGGER_TO_BE_REPLACED|TRUE|g" cicd-ai-assistant/kubernetes/prod/backend-deployment.yaml
                        """
                        withCredentials([
                            string(credentialsId: 'TOKEN', variable: 'TOKEN'), 
                            string(credentialsId: 'CHAT_ID', variable: 'CHAT_ID')
                        ]) {
                            sh """
                                curl -iX GET https://api.telegram.org/bot\$TOKEN/sendMessage \
                                -d chat_id=\$CHAT_ID \
                                -d text='üîîPRODUCTION MIGRATIONS WILL HAPPENüîî\\nID: \$GIT_HASH'
                            """
                        }
                    } else {
                        echo 'No migration triggered'
                        sh """
                            sed -ie "s|MIGRATIONS_TRIGGER_TO_BE_REPLACED|FALSE|g" cicd-ai-assistant/kubernetes/prod/backend-deployment.yaml
                        """
                    }
                }
            }
        }
        
        stage('Deploy') {
            steps {
                script {
                    FAILED_STAGE = "${STAGE_NAME}"
                }
                withKubeCredentials(kubectlCredentials: [[
                    caCertificate: '', 
                    clusterName: 'microk8s-cluster', 
                    contextName: '', 
                    credentialsId: 'kuber-host-token', 
                    namespace: 'ai-assistant-prod', 
                    serverUrl: 'https://10.200.0.11:16443'
                ]]) {
                    sh """
                        # Create ECR secret
                        kubectl delete secret -n ai-assistant-prod ai-assistant-ecr || true
                        kubectl create secret docker-registry ai-assistant-ecr \
                            --docker-server=${CONTAINER_REPO_URI} \
                            --docker-username=AWS \
                            --docker-password=\$(aws ecr get-login-password) \
                            --namespace=ai-assistant-prod \
                            --save-config=true
                        
                        # Apply Kubernetes manifests
                        kubectl apply -f cicd-ai-assistant/kubernetes/prod/namespace.yaml
                        kubectl apply -f cicd-ai-assistant/kubernetes/prod/redis-rabbitmq.yaml
                        kubectl apply -f cicd-ai-assistant/kubernetes/prod/backend-deployment.yaml
                        kubectl apply -f cicd-ai-assistant/kubernetes/prod/frontend-deployment.yaml
                        kubectl apply -f cicd-ai-assistant/kubernetes/prod/ingress.yaml
                    """
                }
            }
        }
        
        stage('cleanup') {
            steps {
                script {
                    FAILED_STAGE = "${STAGE_NAME}"
                }
                sh 'docker system prune -f'
            }
        }
    }
    
    post {
        failure {
            withCredentials([
                string(credentialsId: 'TOKEN', variable: 'TOKEN'), 
                string(credentialsId: 'CHAT_ID', variable: 'CHAT_ID')
            ]) {
                sh """
                    curl -iX GET https://api.telegram.org/bot\$TOKEN/sendMessage \
                    -d chat_id=\$CHAT_ID \
                    -d text="Pipeline: \$JOB_BASE_NAME ‚ùåFAILED (PRODUCTION)\\nBuild url: \$BUILD_URL\\n‚úâÔ∏èMessage: \$COMMIT_MESSAGE\\nFAILED STAGE: \$FAILED_STAGE\\nID: \$GIT_HASH"
                """
            }
        }
        success {
            withCredentials([
                string(credentialsId: 'TOKEN', variable: 'TOKEN'), 
                string(credentialsId: 'CHAT_ID', variable: 'CHAT_ID')
            ]) {
                sh """
                    curl -iX GET https://api.telegram.org/bot\$TOKEN/sendMessage \
                    -d chat_id=\$CHAT_ID \
                    -d text='Pipeline: \$JOB_BASE_NAME ‚úÖSUCCEEDED (PRODUCTION)\\nID: \$GIT_HASH'
                """
            }
        }
    }
}